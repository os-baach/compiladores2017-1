/* The following code was generated by JFlex 1.4.3 on 11/17/16 5:31 PM */

import java.util.Stack;
import java.util.Arrays;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/17/16 5:31 PM from the specification file
 * <tt>Flex.flex</tt>
 */
public class Flexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\10\2\0\1\10\22\0\1\4\1\42\1\34\1\44"+
    "\1\0\1\40\2\0\1\43\1\43\1\36\1\35\1\0\1\11\1\7"+
    "\1\37\1\2\11\6\1\43\1\43\1\35\1\41\1\35\2\0\5\1"+
    "\1\33\15\1\1\31\6\1\1\0\1\12\2\0\1\1\1\0\1\13"+
    "\2\1\1\15\1\26\1\21\1\1\1\23\1\24\2\1\1\25\1\1"+
    "\1\14\1\16\1\30\1\1\1\17\1\27\1\20\1\32\1\1\1\22"+
    "\3\1\1\0\1\3\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\1\1\7\12\2\1\1\3\7\1\1\1\10\1\11"+
    "\1\12\2\2\1\13\5\2\1\0\1\14\1\11\6\2"+
    "\1\0\1\15\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\45\0\45\0\45\0\224"+
    "\0\271\0\336\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc"+
    "\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\45"+
    "\0\336\0\45\0\u02e4\0\271\0\u0309\0\u032e\0\112\0\u0353"+
    "\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u040c\0\45\0\u0431"+
    "\0\u0456\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\112\0\u0534"+
    "\0\u0275";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\1\2\1\13\1\14\1\3\1\15\2\3"+
    "\1\16\1\17\1\3\1\20\1\3\1\21\1\3\1\22"+
    "\1\23\1\3\1\24\1\25\1\12\1\26\1\27\1\30"+
    "\1\12\1\31\1\32\1\33\46\0\2\3\3\0\1\3"+
    "\4\0\21\3\20\0\1\34\37\0\1\10\3\0\1\10"+
    "\1\34\37\0\1\34\3\0\1\34\77\0\1\30\4\0"+
    "\2\3\3\0\1\3\4\0\1\3\1\35\17\3\12\0"+
    "\2\3\3\0\1\3\4\0\3\3\1\36\15\3\12\0"+
    "\2\3\3\0\1\3\4\0\4\3\1\37\14\3\12\0"+
    "\2\3\3\0\1\3\4\0\3\3\1\15\15\3\12\0"+
    "\2\3\3\0\1\3\4\0\10\3\1\40\10\3\12\0"+
    "\2\3\3\0\1\3\4\0\1\3\1\37\4\3\1\37"+
    "\12\3\12\0\2\3\3\0\1\3\4\0\12\3\1\41"+
    "\6\3\12\0\2\3\3\0\1\3\4\0\4\3\1\42"+
    "\14\3\12\0\2\3\3\0\1\3\4\0\4\3\1\43"+
    "\14\3\12\0\2\3\3\0\1\3\4\0\1\44\20\3"+
    "\11\0\10\45\1\0\23\45\1\46\10\45\36\0\1\30"+
    "\45\0\1\30\5\0\10\33\1\47\34\33\1\0\2\3"+
    "\3\0\1\3\4\0\2\3\1\37\16\3\12\0\2\3"+
    "\3\0\1\3\4\0\5\3\1\37\13\3\12\0\2\3"+
    "\3\0\1\3\4\0\11\3\1\50\7\3\12\0\2\3"+
    "\3\0\1\3\4\0\11\3\1\51\2\3\1\52\4\3"+
    "\12\0\2\3\3\0\1\3\4\0\11\3\1\53\7\3"+
    "\12\0\2\3\3\0\1\3\4\0\17\3\1\54\1\3"+
    "\12\0\2\3\3\0\1\3\4\0\12\3\1\55\6\3"+
    "\22\0\1\56\34\0\2\3\3\0\1\3\4\0\12\3"+
    "\1\52\6\3\12\0\2\3\3\0\1\3\4\0\6\3"+
    "\1\37\12\3\12\0\2\3\3\0\1\3\4\0\13\3"+
    "\1\37\5\3\12\0\2\3\3\0\1\3\4\0\1\3"+
    "\1\36\17\3\12\0\2\3\3\0\1\3\4\0\13\3"+
    "\1\57\5\3\12\0\2\3\3\0\1\3\4\0\14\3"+
    "\1\54\4\3\22\0\1\60\36\0\1\61\6\0\1\61"+
    "\21\0\1\61\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1369];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\20\1\1\11\1\1\1\11"+
    "\12\1\1\0\1\1\1\11\6\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final int TABULADOR = 4; /* Número de espacios por tabulador */
  private Stack<Integer> s;
  private int whitespace;
  private boolean espacio; /* Nos dice si la siguiente cadena debe ser un espacio */
  private boolean linestart; /* Nos dice si no hemos leído cadenas válidas en la línea */ 

  /* Incrementa blancos en i */
  public void incrementa(int i){
      whitespace+=i;
  }

  /* Vuelve 0 a los blancos */
  public void clearWhitespace(){
      whitespace = 0;
  } 
	
  public int peek(){
    return s.peek();
  }

  public void push(int i){
    s.push(i);
  }

  public void pop(){
    s.pop();
  }

  public void cuentaIndentacion(){
  if(whitespace > peek()){
      push(whitespace);
      System.out.print("INDENT(" + (whitespace) + ")");
   }else{
	while(whitespace < peek()){
        pop();
        if(whitespace > peek()){
          System.err.println("Error de indentación. Línea " + (yyline+1) + ".");
	  System.exit(-1);
        }        
        System.out.println("DEDENT");
	}
    }
    linestart = false;
  }

  /* Vacía la pila e imprime DEDENT por cada elemento en ella (excepto el primero) */
  public void dedentAll(){
      while(peek() != 0){
          System.out.println("DEDENT");
	  pop();
      }
  }

  /* Quita las comillas al principio y final de la cadena s */
  public String quitaComillas(String s){
      return s.replace("\"", "");
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Flexer(java.io.Reader in) {
    s = new Stack<>();
  s.push(0);
  whitespace = 0;
  linestart = true;
  espacio = false;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Flexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { if(espacio){
	System.err.println("Átomo mal formado en la línea " + (yyline+1) + ".");
	  System.exit(-1);
       }
       if(linestart)
		 cuentaIndentacion();
		 System.out.print("REAL(" + yytext() + ")");
		 espacio = true;
          }
        case 14: break;
        case 5: 
          { if(linestart)
		incrementa(1); espacio = false;
          }
        case 15: break;
        case 12: 
          { if(espacio){
	 System.err.println("Átomo mal formado en la línea " + (yyline+1) + ".");
	  System.exit(-1);
       }
	 if(linestart)
		     cuentaIndentacion();
		 System.out.print("CADENA(" + quitaComillas(yytext()) + ")");
		 espacio = true;
          }
        case 16: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 17: break;
        case 13: 
          { if(espacio){
	  System.err.println("Átomo mal formado en la línea " + (yyline+1) + ".");
	  System.exit(-1);
       }
	 if(linestart)
	 cuentaIndentacion();
	 System.out.print("BOOLEANO(" + yytext() + ")");
	 espacio = true;
          }
        case 18: break;
        case 9: 
          { if(!linestart){
		System.out.println("NEWLINE"); clearWhitespace(); linestart=true; espacio = false;
	     }
          }
        case 19: break;
        case 4: 
          { System.out.println("NEWLINE"); clearWhitespace(); linestart=true; espacio = false;
          }
        case 20: break;
        case 6: 
          { if(linestart)
           incrementa(TABULADOR); espacio = false;
          }
        case 21: break;
        case 7: 
          { if(linestart)
	cuentaIndentacion();
	System.out.print("OPERADOR(" + yytext() + ")");
	espacio=false;
          }
        case 22: break;
        case 11: 
          { if(espacio){
	  System.err.println("Átomo mal formado en la línea " + (yyline+1) + ".");
	  System.exit(-1);
       }
	 if(linestart)
	 cuentaIndentacion();
	 System.out.print("KEYWORD(" + yytext() + ")");
	 espacio = true;
          }
        case 23: break;
        case 3: 
          { if(espacio){
	 System.err.println("Átomo mal formado en la línea " + (yyline+1) + ".");
	 System.exit(-1);
       espacio = true;}

	 if(linestart)
		     cuentaIndentacion();
		 System.out.print("ENTERO(" + yytext() + ")");
		 espacio = true;
          }
        case 24: break;
        case 8: 
          { if(linestart)
	cuentaIndentacion();
	System.out.print("SEPARADOR(" + yytext() + ")");
	espacio=false;
          }
        case 25: break;
        case 2: 
          { if(espacio){
		System.err.println("Átomo mal formado en la línea " + (yyline+1) + ".");
		 System.exit(-1);
       }

		if(linestart)
		     cuentaIndentacion();
		 System.out.print("IDENTIFICADOR(" + yytext() + ")");
		 espacio = true;
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                dedentAll(); System.exit(0);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Flexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Flexer scanner = null;
        try {
          scanner = new Flexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
